Ici sera liste quelques liens que j'aurai trouvé interressant et pourrait peut être me servir dans un futur

**| Jeremy double auth |**
Le lien Git Hub de Jeremy pour la verification en deux étapes de Laravel marche sur du Laravel Breeze version 10 prise en charge : https://github.com/jeremykenedy/laravel2step?tab=readme-ov-file


Pour la gestion de la documentation de son API **Scramble** me parait ideal meme si il en existe plusieurs autres comme Swagger: Scribe etc ..

**| API doc Scramble |**

Le lien de scramble : https://scramble.dedoc.co

**| laravel-crud-generator |**

Pour installer le package en mode développement :

*composer require ibex/crud-generator --dev*

Publier le fichier de configuration :

*php artisan vendor:publish --tag=crud*
On cree la base de donne avec les tables
**Utilisation**
php artisan make:crud noms

sa va generer
*un model exemple [Nom.php]
*un controller [NomController.php]
et dans Views un complet nom avec tous les fichiers blade que sont
*create.blade.php
*edit.blade.php
*form.blade.php
*index.blade.php
*show.blade.php

Rendez-vous dans le fichier de route « web.php » pour déclarer la route d’accès au CRUD
use App\Http\Controllers\PostController;

Route::resource('posts', PostController::class);

Article lu Ici: https://captainpackage.com/package-laravel/comment-generer-un-crud-complet-avec-laravel/
Son GitHub: https://github.com/llvnr



**Laravel Notification**
Le lien de l'article: https://captainpackage.com/package-laravel/comment-envoyer-et-customiser-des-notifications-avec-laravel/
le package sur git: https://github.com/mckenziearts/laravel-notify
 Une notification peut être ponctuelle, éphémère, stocker et consultable ultérieurement. Dans le cas présent, nous allons juste émettre des notifications éphémère pour les différents cas que nous allons voir en utilisant le package « laravel-notify » : 
Installation : composer require mckenziearts/laravel-notify

Publiez ensuite le fichier et les assets de configuration :
php artisan vendor:publish --provider="Mckenziearts\Notify\LaravelNotifyServiceProvider"

Rechargez les nouveaux fichiers via la commande :composer dump-autoload

Configuration :
Ajoutez le provider dans le fichier « config/app.php » :
'providers' => [
    ...
    Mckenziearts\Notify\LaravelNotifyServiceProvider::class
    ...
];


Ouvrez ensuite le fichier de configuration de notify dans « config/notify.php » (dans ce fichier, vous pouvez définir le thème dark ou light, le temps d’affichage des notifications, configurer des messages prédéfini) :
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Notify Theme
    |--------------------------------------------------------------------------
    |
    | You can change the theme of notifications by specifying the desired theme.
    | By default the theme light is activated, but you can change it by
    | specifying the dark mode. To change theme, update the global variable to `dark`
    |
    */

    'theme' => env('NOTIFY_THEME', 'light'),

    /*
    |--------------------------------------------------------------------------
    | Notification timeout
    |--------------------------------------------------------------------------
    |
    | Defines the number of seconds during which the notification will be visible.
    |
    */

    'timeout' => 5000,

    /*
    |--------------------------------------------------------------------------
    | Preset Messages
    |--------------------------------------------------------------------------
    |
    | Define any preset messages here that can be reused.
    | Available model: connect, drake, emotify, smiley, toast
    |
    */

    'preset-messages' => [
        // An example preset 'user updated' Connectify notification.
        'user-updated' => [
            'message' => 'The user has been updated successfully.',
            'type' => 'success',
            'model' => 'connect',
            'title' => 'User Updated',
        ],
    ],

];


Utilisation :

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>NOTIFY ME !!!</title>
    @notifyCss
</head>
<body>

    <h1>TEST NOTIFY !</h1>
    
    <x-notify::notify />
    @notifyJs

</body>
</html>

Nous pouvons maintenant commencer à envoyer des notifications dans « routes/web.php » :

Route::get('/', function () {

    notify()->success('Trop bien laravel notify ! ⚡️'); // MESSAGE SUCCES SIMPLE
    notify()->success('Trop bien Laravel Notify ! ⚡️', 'Je customise mon titre !'); // MESSAGE SUCCESS AVEC TITRE CUSTOM
    connectify('success', 'Connection trouvé !', 'Félicitations, vous êtes connecté !'); // MESSAGE EN RAPPORT AVEC LA CONNEXION !
    drakify('success'); // ON DRAKIFY LES NOTIFICATIONS A SUCCESS.
    drakify('error'); // ON DRAKIFY LES NOTIFICATIONS EN ERREUR.
    smilify('success', 'Tu es reconnecté !'); // NOTIFICATION AVEC EMOJIS
    emotify('success', 'C\'est top !'); // NOTIFICATION AVEC EMOJIS V2
    notify()->preset('user-updated'); // MESSAGE PROVENANT DU FICHIER DE CONFIGURATION
    
    return view('welcome');
    
});

**| Pour la gestion des package laravel |**
**CaptainPackage** est mieux place sur Youtube pour soucis en plus c'est en francais
son site: https://captainpackage.com/

**** Toujours avec CaptainPackage ****
**| Comment obtenir une base de données de pays avec Laravel ?|**
Le lien du site: https://captainpackage.com/package-laravel/comment-obtenir-une-base-de-donnees-de-pays-avec-laravel/

 utiliser le package « laravel-world ». Ce package vous fournit une base de données complète :

– Des pays (250 Enregistrements*)
– Des états (4984 Enregistrements*)
– Des villes (151249 Enregistrements*)
– Des fuseaux horaires (428 Enregistrements*)
– Des devises (250 Enregistrements*)

Installation : composer require nnjeim/world

Publiez tous les fichiers de configuration :
php artisan vendor:publish --tag=world
php artisan vendor:publish --tag=world --force

Appliquer les migrations :

php artisan migrate
Alimenter la base de données via le seeding (Attention : cette tâche peut durer jusqu’à 15 minutes, mais ça a été rapide pour moi dans local) : 

php artisan db:seed --class=WorldSeeder

Utilisation :
nous allons récupérer la liste des pays (nous utiliserons le fichier routes/web.php pour les tests) :
<?php

use Illuminate\Support\Facades\Route;
use Nnjeim\World\World;
use Nnjeim\World\WorldHelper;


Route::get('/', function () {

    $action =  World::countries();

    $countries = $action->data;
    dump($countries);
});

Pour ce second cas d’utilisation, nous allons récupérer toutes les villes et les états pour le pays de la France en utilisant un filtre :
<?php

use Illuminate\Support\Facades\Route;
use Nnjeim\World\World;
use Nnjeim\World\WorldHelper;

Route::get('/', function () {

    $actionDeux =  World::countries([
        'fields' => 'states,cities',
        'filters' => [
            'iso2' => 'FR',
        ]
    ]);

    $countriesDeux = $actionDeux->data;
    dump($countriesDeux);
    
});

Nous allons récupérer toutes les villes d’un pays :
<?php

use Illuminate\Support\Facades\Route;
use Nnjeim\World\World;
use Nnjeim\World\WorldHelper;

Route::get('/', function () {

    $actionTrois = World::cities([
        'filters' => [
            'country_id' => 182,
        ],
    ]);

    $cities = $action->data;
    dump($cities);
});

Nous allons récupérer les monnaies :
<?php

use Illuminate\Support\Facades\Route;
use Nnjeim\World\World;
use Nnjeim\World\WorldHelper;

Route::get('/', function () {

    $actionQuatre = World::currencies();

    $currencie = $actionQuatre->data;
    dump($currencie);
    
});

Et pour finir les langages disponibles :
$actionCinq = World::languages();

$languages = $actionCinq->data;
dump($languages);

Pour chacune de ces données, je pense qu’il est possible de faire des combinaisons de filtre pour extraire de manière intelligence les données que vous souhaitez mettre en évidence ou obtenir. Le package vous offre aussi des endpoints API pour une utilisation autre que monolithique :
/api/countries
/api/countries?fields=states,cities&filters[iso2]=FR
/api/cities?filters[country_code]=RO
/api/states
/api/timezones
/api/currencies
/api/languages





**| Application Deskop fait avec Php Laravel |**
le lien du git: https://github.com/cztomczak/phpdesktop/releases/tag/chrome-v57.0-rc
Le nom du gestionnaire du package: cztomczak/phpdesktop





# Formattage de l'heure en fonction de la langue francaise

Pour afficher la date en français dans Laravel, vous pouvez utiliser la localisation (localization) de PHP et Carbon, qui est une extension de la bibliothèque DateTime de PHP.

Étapes pour afficher la date en français :
Configurer la localisation dans Laravel :
Laravel utilise Carbon pour manipuler les dates. Vous devez donc configurer la localisation de Carbon pour qu'il affiche les dates en français.

Utiliser Carbon avec la localisation française :
Utilisez Carbon pour formater la date et définir la langue sur le français.

Exemple :
1. Configurer la localisation
Assurez-vous que l'application est configurée pour utiliser le français. Dans le fichier de configuration config/app.php, changez la ligne de langue par défaut :

php
Copier le code
'locale' => 'fr',
2. Utiliser Carbon pour formater la date
Dans votre vue Blade, vous pouvez utiliser Carbon pour formater la date en français :

blade
Copier le code
<?php
use Carbon\Carbon;
Carbon::setLocale('fr');
?>

{{ \Carbon\Carbon::parse($carnet->created_at)->translatedFormat('D d F Y') }}
Explication :
Carbon::setLocale('fr') : Définit la langue de Carbon sur le français.
\Carbon\Carbon::parse($carnet->created_at) : Analyse la date created_at du modèle carnet.
translatedFormat('D d F Y') : Formate la date en utilisant le format jour de la semaine jour mois année en français.
Exemple complet dans une vue Blade :
blade
Copier le code
<!DOCTYPE html>
<html>
<head>
    <title>Affichage de la date en français</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Date en français</h1>
    <p>
        <?php
        use Carbon\Carbon;
        Carbon::setLocale('fr');
        ?>
        {{ \Carbon\Carbon::parse($carnet->created_at)->translatedFormat('D d F Y') }}
    </p>
</div>
</body>
</html>
Résumé :
Assurez-vous que la localisation de l'application est configurée pour le français dans config/app.php.
Utilisez Carbon avec la méthode translatedFormat pour afficher la date dans le format souhaité en français.
Avec ces étapes, la date affichée devrait être en français, y compris le jour de la semaine et le mois.